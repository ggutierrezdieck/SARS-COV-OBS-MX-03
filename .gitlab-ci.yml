image: python

# Changing pip's cache directory to be inside the project directory since we can only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

stages:
  - test
  - deploy

before_script:
  - python -V               # Print out python version for debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate

test:
  stage: test
  script:
    # this configures Django application to use attached postgres database that is run on `postgres` host
    #- export DATABASE_URL=postgres://postgres:@postgres:5432/python-test-app
    - apt-get update -qy
    - apt-get install -y python-dev python-pip
    - pip install -r requirements.txt
    - python manage.py test

# staging: # Deploy to staing area, need to configur heroku
#   stage: deploy
#   script:
#     - apt-get update -qy
#     - apt-get install -y ruby-dev
#     - gem install dpl
#     - dpl --provider=heroku --app=sars-cov-obs-mx-03 --api-key=$HEROKU_STAGING_API_KEY
#   only:
#     - master

production:
  stage: deploy
  script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    - dpl --provider=heroku --app=sars-cov-obs-mx-03 --api-key=$HEROKU_PRODUCTION_API_KEY
  only:
    - master